  Programação orientada a objetos #1

	Abstração de processos:
	
		Comando sorted, faz a ordenação de uma lista. Faz raid de uma implementação e chama apenas a função ou o que ela faz. 
	
	Abstração de dados:
		
		Dado abstrato é chamado de tipo. Ex: string, int, float, decimal
		
		Classes: Conjunto de objetos que tem a mesma função, interreses e objetivos. 
		Atributos: São adjetivos referentes a algo. EX: Cor, gênero...
		Métodos: São abstrações de processos de uma abstração de dados. Ex: Soma, divisão, subtração...
			Utiliza-se duas palavras especificas em Python: self ou cls.  (Self significa Eu mesmo
	
	Self X cls:
		Self: Sempre que queremos falar com o exemplo
		Cls: Sempre que queremos falar com a classe
		
		Decorador @classmethod deixa explicito que pe um método de classe. 
		
	Heranças:
		Heranças são definidos como um reutilizador de códigos. Servem para instanciar valores de um objeto, e atribuir outros atributos a ele.
		
	Polimorfismo:
		Polimorfismo sobrescreve um metodo de uma classe. 
		
	Encapsulamento:
		Permite ao programador agrupar dados e sub rotinas que operam neles juntos em um unico lugar, e ocultar detalhes irrelevantes dos usuários de abstração.
		
	Composição: 
		É uma maneira de ligar objetos sem heranças, ou seja, se os tipos não são "filhos" essa é a amandeira usada para ligar classes.
		    
	Durders - Métodos especiais
		Dunders _init_ é o inicializador. _new_ é o construtor. 
			_new_ é para criar uma nova instancia de classes cls. É um metodo estático, que usa a classe da qual a uma instancia foi solicitada como seu primeiro argumento. 
			o retorno do _new_ é a instancia do projeto.  
			
			__init__ jamais pode retornar um valor nulo. 
			
			__del__ chamado quando a instancia esta prestes a ser destruida. 
			
		Sintaxe super, chama o método da superclasse. Ou seja, tem a funfão de chamar o método definido na classe PAI

	
