  Programação orientada a objetos #1

	Abstração de processos:
	
		Comando sorted, faz a ordenação de uma lista. Faz raid de uma implementação e chama apenas a função ou o que ela faz. 
	
	Abstração de dados:
		
		Dado abstrato é chamado de tipo. Ex: string, int, float, decimal
		
		Classes: Conjunto de objetos que tem a mesma função, interreses e objetivos. 
		Atributos: São adjetivos referentes a algo. EX: Cor, gênero...
		Métodos: São abstrações de processos de uma abstração de dados. Ex: Soma, divisão, subtração...
			Utiliza-se duas palavras especificas em Python: self ou cls.  (Self significa Eu mesmo
	
	Self X cls:
		Self: Sempre que queremos falar com o exemplo
		Cls: Sempre que queremos falar com a classe
		
		Decorador @classmethod deixa explicito que pe um método de classe. 
		
	Heranças:
		Heranças são definidos como um reutilizador de códigos. Servem para instanciar valores de um objeto, e atribuir outros atributos 		
		a ele.
		
	Polimorfismo:
		Polimorfismo sobrescreve um metodo de uma classe. 
		
	Encapsulamento:
		Permite ao programador agrupar dados e sub rotinas que operam neles juntos em um unico lugar, e ocultar detalhes irrelevantes dos
 		usuários de abstração.
		
	Composição: 
		É uma maneira de ligar objetos sem heranças, ou seja, se os tipos não são "filhos" essa é a amandeira usada para ligar classes.
		    
	Durders - Métodos especiais
		Dunders _init_ é o inicializador. _new_ é o construtor. 
			_new_ é para criar uma nova instancia de classes cls. É um metodo estático, que usa a classe da qual a uma instancia foi 	
			solicitada como seu primeiro argumento. 
			o retorno do _new_ é a instancia do projeto.  
			
			__init__ jamais pode retornar um valor nulo. 
			
			__del__ chamado quando a instancia esta prestes a ser destruida. 
			
		Sintaxe super, chama o método da superclasse. Ou seja, tem a funfão de chamar o método definido na classe PAI

	S0brecarga de Operadores
		São utilizados para mais de um proposito. 
			EX: Operador + é usado para especificar adição de inteiros e adição de ponto flutuante. Esse uso multiplo de um operador é 	
	       	    chamado de sobrecarga do operador.	
			Sobrecarga de operadores permite interoperação entre objetos definidos pelo usuário e os   operadores. 
			
			Operadores  /  Método	 
			
			+  		_add_
			-		_sub_
			*		_mul_
			/		_floordiv_
			//		_truediv_
			<		_it_
			<= 		_le_
			==		_eq_
			<<		_ishift_
			>>		_rshifit_
			%		_mod_
			&		_and_
			|		_or_			
			
		Operador Inplace
			Expressão não tem um resultado, ela modifica o objeto que tem o operado. 
			Eles nunca devem retornar nada, pois estão modificando o proprio objeto. 
			
			peradores  /    Método	 
			
			+=		_iadd_
			-=		_isub_
			*= 		_imul_
			/=		_ifloordiv_
			//=		_itruediv_
			<<=		_ilshift_
			>>= 		_irshift_
			
	
	Sockets 
	
		* Permite a comunicação entre processos IPC via rede fisica ou virtual. 
		* Não possui o overhead das camadas superiores de rede e dá um controle superior em relação ao estado das conexões. 
		* Permite customizar alguns aspectos da conexão. 
		* Biblioteca que cuida das camadas baixas de conexão 
		* Possivel criar seu proprio protocolo de aplicação se quiser. 
		
		Protocolo TCP							Protocolo UDP
			
		Comunicação confiavél 						Comunicação Não-Confiavel
		Recebimento ordenado de pacotes				Não é garantida a ordem de pacotes
		Pode apresentar alto deley em conexão ruins			Costuma manter a performance mesmo em conexões ruins
		Aplicação com aspectos de integridade				Aplicações time-sensitive
		Pacote "Pesado" 						Pacote "leve"
		Ciclo de vida conplexo						Ciclo de vida simples 						
		
		
		
	Interfaces
		* São chamadas de PROTOCOLOS
		* Tuplas, isto é, uma Estrutura de Dados semelhante as Listas porém imutáve	
		
	Objetos em Python
		Todos objetos contém 3 propriedades basicas. 
			* Identidade - id() - IMUTAVEL
			* Tipo - type() - IMUTAVEL
			* Valor - MUTAVEL/IMUTAVEL - (Referente ao seu tipo)
			
			Mutáveis			Imutáveis
				* Listas		* Tuplas
				* Dicionarios		* Numeros - int, float, comples
				* Conjuntos		* Strings
		    					* Conjuntos congelados
		
	Função DIR():
		Se chamada sozinha, retorna as variáveis do escopo local.
		Caso seja chamada com um objeto, retorna os métodos/ atributos do objeto chamado. 
		 
	
	Metodos:
		 São incorporados de um objeto comum em python chamado "object" e eçes definem uma interface padrão para que um objeto seja um objeto
		
		
		 
		
		
		
		
		
		
		
		
		
		
		
				
			
			
			
			
			
			
			
			
